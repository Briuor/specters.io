/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./node_modules/@geckos.io/client/lib/geckos/channel.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { "default": mod };\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.ClientChannel = void 0;\r\nvar reliableMessage_1 = __webpack_require__(/*! @geckos.io/common/lib/reliableMessage */ "./node_modules/@geckos.io/common/lib/reliableMessage.js");\r\nvar constants_1 = __webpack_require__(/*! @geckos.io/common/lib/constants */ "./node_modules/@geckos.io/common/lib/constants.js");\r\nvar peerConnection_1 = __importDefault(__webpack_require__(/*! ../wrtc/peerConnection */ "./node_modules/@geckos.io/client/lib/wrtc/peerConnection.js"));\r\nvar connectionsManager_1 = __importDefault(__webpack_require__(/*! ../wrtc/connectionsManager */ "./node_modules/@geckos.io/client/lib/wrtc/connectionsManager.js"));\r\nvar ClientChannel = /** @class */ (function () {\r\n    function ClientChannel(url, authorization, port, label, rtcConfiguration) {\r\n        var _this = this;\r\n        this.userData = {};\r\n        // stores all reliable messages for about 15 seconds\r\n        this.receivedReliableMessages = [];\r\n        this.url = port ? url + ":" + port : url;\r\n        this.connectionsManager = new connectionsManager_1.default(this.url, authorization, label, rtcConfiguration);\r\n        this.bridge = this.connectionsManager.bridge;\r\n        // remove all event listeners on disconnect\r\n        this.bridge.on(constants_1.EVENTS.DISCONNECTED, function () { return _this.bridge.removeAllListeners(); });\r\n    }\r\n    ClientChannel.prototype.onconnectionstatechange = function () {\r\n        var _this = this;\r\n        var lpc = this.peerConnection.localPeerConnection;\r\n        lpc.onconnectionstatechange = function () {\r\n            if (lpc.connectionState === \'disconnected\' || lpc.connectionState === \'closed\')\r\n                _this.bridge.emit(constants_1.EVENTS.DISCONNECTED);\r\n        };\r\n    };\r\n    Object.defineProperty(ClientChannel.prototype, "id", {\r\n        /** Get the channel\'s id. */\r\n        get: function () {\r\n            return this.peerConnection.id;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /** Close the WebRTC connection */\r\n    ClientChannel.prototype.close = function () {\r\n        this.peerConnection.localPeerConnection.close();\r\n        // fire the DISCONNECTED event manually\r\n        this.bridge.emit(constants_1.EVENTS.DISCONNECTED);\r\n        try {\r\n            var host = this.url + "/.wrtc/v1";\r\n            fetch(host + "/connections/" + this.id + "/close", {\r\n                method: \'POST\',\r\n                headers: {\r\n                    \'Content-Type\': \'application/json\'\r\n                }\r\n            });\r\n        }\r\n        catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    };\r\n    /** Emit a message to the server. */\r\n    ClientChannel.prototype.emit = function (eventName, data, options) {\r\n        var _this = this;\r\n        if (data === void 0) { data = null; }\r\n        if (options && options.reliable) {\r\n            reliableMessage_1.makeReliable(options, function (id) {\r\n                return _this.connectionsManager.emit(eventName, {\r\n                    MESSAGE: data,\r\n                    RELIABLE: 1,\r\n                    ID: id\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            this.connectionsManager.emit(eventName, data);\r\n        }\r\n    };\r\n    Object.defineProperty(ClientChannel.prototype, "raw", {\r\n        /** Emit a raw message to the server */\r\n        get: function () {\r\n            var _this = this;\r\n            return {\r\n                /**\r\n                 * Emit a raw message.\r\n                 * @param rawMessage The raw message. Can be of type \'USVString | ArrayBuffer | ArrayBufferView\'\r\n                 */\r\n                emit: function (rawMessage) { return _this.emit(constants_1.EVENTS.RAW_MESSAGE, rawMessage); }\r\n            };\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Listen for a raw message from the server.\r\n     * @param callback The event callback.\r\n     */\r\n    ClientChannel.prototype.onRaw = function (callback) {\r\n        this.bridge.on(constants_1.EVENTS.RAW_MESSAGE, function (rawMessage) {\r\n            var cb = function (rawMessage) { return callback(rawMessage); };\r\n            cb(rawMessage);\r\n        });\r\n    };\r\n    /**\r\n     * Listen for the connect event.\r\n     * @param callback The event callback.\r\n     */\r\n    ClientChannel.prototype.onConnect = function (callback) {\r\n        var _a;\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var response;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        this.peerConnection = new peerConnection_1.default();\r\n                        return [4 /*yield*/, this.peerConnection.connect(this.connectionsManager)];\r\n                    case 1:\r\n                        response = _b.sent();\r\n                        if (response.error)\r\n                            callback(response.error);\r\n                        else {\r\n                            // set the userData\r\n                            if (response.userData)\r\n                                this.userData = response.userData;\r\n                            // keep track of the maxMessageSize\r\n                            this.maxMessageSize = this.connectionsManager.maxMessageSize = (_a = this.peerConnection.localPeerConnection.sctp) === null || _a === void 0 ? void 0 : _a.maxMessageSize;\r\n                            // init onConnectionStateChange event\r\n                            this.onconnectionstatechange();\r\n                            // we are now ready\r\n                            callback();\r\n                        }\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * Listen for the disconnect event.\r\n     * @param callback The event callback.\r\n     */\r\n    ClientChannel.prototype.onDisconnect = function (callback) {\r\n        this.bridge.on(constants_1.EVENTS.DISCONNECTED, callback);\r\n    };\r\n    /**\r\n     * Listen for a message from the server.\r\n     * @param eventName The event name.\r\n     * @param callback The event callback.\r\n     */\r\n    ClientChannel.prototype.on = function (eventName, callback) {\r\n        var _this = this;\r\n        this.bridge.on(eventName, function (data) {\r\n            // check if message is reliable\r\n            // and reject it if it has already been submitted\r\n            var isReliableMessage = data && data.RELIABLE === 1 && data.ID !== \'undefined\';\r\n            var expireTime = 15000; // 15 seconds\r\n            var deleteExpiredReliableMessages = function () {\r\n                var currentTime = new Date().getTime();\r\n                _this.receivedReliableMessages.forEach(function (msg, index, object) {\r\n                    if (msg.expire <= currentTime) {\r\n                        object.splice(index, 1);\r\n                    }\r\n                });\r\n            };\r\n            if (isReliableMessage) {\r\n                deleteExpiredReliableMessages();\r\n                if (_this.receivedReliableMessages.filter(function (obj) { return obj.id === data.ID; }).length === 0) {\r\n                    _this.receivedReliableMessages.push({\r\n                        id: data.ID,\r\n                        timestamp: new Date(),\r\n                        expire: new Date().getTime() + expireTime\r\n                    });\r\n                    callback(data.MESSAGE);\r\n                }\r\n                else {\r\n                    // reject message\r\n                }\r\n            }\r\n            else {\r\n                callback(data);\r\n            }\r\n        });\r\n    };\r\n    return ClientChannel;\r\n}());\r\nexports.ClientChannel = ClientChannel;\r\n/**\r\n * The geckos.io client library.\r\n * @param options.url The url of the server. Default: \\`${location.protocol}//${location.hostname}\\`.\r\n * @param options.port The port of the server. Default: 9208.\r\n * @param options.label The label of the DataChannel. Default: \'geckos.io\'.\r\n * @param options.iceServers An array of RTCIceServers. See https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer.\r\n * @param options.iceTransportPolicy RTCIceTransportPolicy enum defines string constants which can be used to limit the transport policies of the ICE candidates to be considered during the connection process.\r\n */\r\nvar geckosClient = function (options) {\r\n    if (options === void 0) { options = {}; }\r\n    var _a = options.iceServers, iceServers = _a === void 0 ? [] : _a, _b = options.iceTransportPolicy, iceTransportPolicy = _b === void 0 ? \'all\' : _b, _c = options.url, url = _c === void 0 ? location.protocol + "//" + location.hostname : _c, _d = options.authorization, authorization = _d === void 0 ? undefined : _d, _e = options.port, port = _e === void 0 ? 9208 : _e, _f = options.label, label = _f === void 0 ? \'geckos.io\' : _f;\r\n    return new ClientChannel(url, authorization, port, label, { iceServers: iceServers, iceTransportPolicy: iceTransportPolicy });\r\n};\r\nexports.default = geckosClient;\r\n//# sourceMappingURL=channel.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/client/lib/geckos/channel.js?')},"./node_modules/@geckos.io/client/lib/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o["default"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nvar channel_1 = __importStar(__webpack_require__(/*! ./geckos/channel */ "./node_modules/@geckos.io/client/lib/geckos/channel.js"));\r\nexports.default = channel_1.default;\r\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/client/lib/index.js?')},"./node_modules/@geckos.io/client/lib/wrtc/connectionsManager.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { "default": mod };\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nvar bridge_1 = __webpack_require__(/*! @geckos.io/common/lib/bridge */ "./node_modules/@geckos.io/common/lib/bridge.js");\r\nvar parseMessage_1 = __importDefault(__webpack_require__(/*! @geckos.io/common/lib/parseMessage */ "./node_modules/@geckos.io/common/lib/parseMessage.js"));\r\nvar sendMessage_1 = __importDefault(__webpack_require__(/*! @geckos.io/common/lib/sendMessage */ "./node_modules/@geckos.io/common/lib/sendMessage.js"));\r\nvar ConnectionsManagerClient = /** @class */ (function () {\r\n    function ConnectionsManagerClient(url, authorization, label, rtcConfiguration) {\r\n        var _this = this;\r\n        this.url = url;\r\n        this.authorization = authorization;\r\n        this.label = label;\r\n        this.rtcConfiguration = rtcConfiguration;\r\n        this.bridge = new bridge_1.Bridge();\r\n        this.onDataChannel = function (ev) {\r\n            var channel = ev.channel;\r\n            if (channel.label !== _this.label)\r\n                return;\r\n            _this.dataChannel = channel;\r\n            // set default binaryType to arraybuffer\r\n            // https://github.com/node-webrtc/node-webrtc/issues/441\r\n            _this.dataChannel.binaryType = \'arraybuffer\';\r\n            _this.dataChannel.onmessage = function (ev) {\r\n                var _a = parseMessage_1.default(ev), key = _a.key, data = _a.data;\r\n                _this.bridge.emit(key, data);\r\n            };\r\n        };\r\n    }\r\n    ConnectionsManagerClient.prototype.emit = function (eventName, data) {\r\n        if (data === void 0) { data = null; }\r\n        sendMessage_1.default(this.dataChannel, this.maxMessageSize, eventName, data);\r\n    };\r\n    // fetch additional candidates\r\n    ConnectionsManagerClient.prototype.fetchAdditionalCandidates = function (host, id) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var res, candidates;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, fetch(host + "/connections/" + id + "/additional-candidates", {\r\n                            method: \'GET\',\r\n                            headers: {\r\n                                \'Content-Type\': \'application/json\'\r\n                            }\r\n                        })];\r\n                    case 1:\r\n                        res = _a.sent();\r\n                        if (!res.ok) return [3 /*break*/, 3];\r\n                        return [4 /*yield*/, res.json()];\r\n                    case 2:\r\n                        candidates = _a.sent();\r\n                        candidates.forEach(function (c) {\r\n                            _this.localPeerConnection.addIceCandidate(c);\r\n                        });\r\n                        _a.label = 3;\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    ConnectionsManagerClient.prototype.connect = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var host, headers, userData, res, json, error_1, _a, id, localDescription, configuration, RTCPc, showBackOffIntervals, originalAnswer, updatedAnswer, error_2, waitForDataChannel, error_3;\r\n            var _b;\r\n            var _this = this;\r\n            return __generator(this, function (_c) {\r\n                switch (_c.label) {\r\n                    case 0:\r\n                        host = this.url + "/.wrtc/v1";\r\n                        headers = { \'Content-Type\': \'application/json\' };\r\n                        if (this.authorization)\r\n                            headers = __assign(__assign({}, headers), (_b = {}, _b[\'Authorization\'] = this.authorization, _b));\r\n                        userData = {};\r\n                        _c.label = 1;\r\n                    case 1:\r\n                        _c.trys.push([1, 4, , 5]);\r\n                        return [4 /*yield*/, fetch(host + "/connections", {\r\n                                method: \'POST\',\r\n                                headers: headers\r\n                            })];\r\n                    case 2:\r\n                        res = _c.sent();\r\n                        return [4 /*yield*/, res.json()];\r\n                    case 3:\r\n                        json = _c.sent();\r\n                        userData = json.userData;\r\n                        this.remotePeerConnection = json;\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        error_1 = _c.sent();\r\n                        console.error(error_1.message);\r\n                        return [2 /*return*/, { error: error_1 }];\r\n                    case 5:\r\n                        _a = this.remotePeerConnection, id = _a.id, localDescription = _a.localDescription;\r\n                        configuration = __assign({ \r\n                            // @ts-ignore\r\n                            sdpSemantics: \'unified-plan\' }, this.rtcConfiguration);\r\n                        RTCPc = RTCPeerConnection ||\r\n                            webkitRTCPeerConnection ||\r\n                            // @ts-ignore\r\n                            mozRTCPeerConnection;\r\n                        // create rtc peer connection\r\n                        this.localPeerConnection = new RTCPc(configuration);\r\n                        showBackOffIntervals = function (attempts, initial, factor, jitter) {\r\n                            if (attempts === void 0) { attempts = 10; }\r\n                            if (initial === void 0) { initial = 50; }\r\n                            if (factor === void 0) { factor = 1.8; }\r\n                            if (jitter === void 0) { jitter = 20; }\r\n                            return Array(attempts)\r\n                                .fill(0)\r\n                                .map(function (_, index) { return parseInt((initial * Math.pow(factor, index)).toString()) + parseInt((Math.random() * jitter).toString()); });\r\n                        };\r\n                        showBackOffIntervals().forEach(function (ms) {\r\n                            setTimeout(function () {\r\n                                _this.fetchAdditionalCandidates(host, id);\r\n                            }, ms);\r\n                        });\r\n                        _c.label = 6;\r\n                    case 6:\r\n                        _c.trys.push([6, 16, , 17]);\r\n                        return [4 /*yield*/, this.localPeerConnection.setRemoteDescription(localDescription)];\r\n                    case 7:\r\n                        _c.sent();\r\n                        this.localPeerConnection.addEventListener(\'datachannel\', this.onDataChannel, { once: true });\r\n                        return [4 /*yield*/, this.localPeerConnection.createAnswer()];\r\n                    case 8:\r\n                        originalAnswer = _c.sent();\r\n                        updatedAnswer = new RTCSessionDescription({\r\n                            type: \'answer\',\r\n                            sdp: originalAnswer.sdp\r\n                        });\r\n                        return [4 /*yield*/, this.localPeerConnection.setLocalDescription(updatedAnswer)];\r\n                    case 9:\r\n                        _c.sent();\r\n                        _c.label = 10;\r\n                    case 10:\r\n                        _c.trys.push([10, 12, , 13]);\r\n                        return [4 /*yield*/, fetch(host + "/connections/" + id + "/remote-description", {\r\n                                method: \'POST\',\r\n                                body: JSON.stringify(this.localPeerConnection.localDescription),\r\n                                headers: {\r\n                                    \'Content-Type\': \'application/json\'\r\n                                }\r\n                            })];\r\n                    case 11:\r\n                        _c.sent();\r\n                        return [3 /*break*/, 13];\r\n                    case 12:\r\n                        error_2 = _c.sent();\r\n                        console.error(error_2.message);\r\n                        return [2 /*return*/, { error: error_2 }];\r\n                    case 13:\r\n                        waitForDataChannel = function () {\r\n                            return new Promise(function (resolve) {\r\n                                _this.localPeerConnection.addEventListener(\'datachannel\', function () {\r\n                                    resolve();\r\n                                }, { once: true });\r\n                            });\r\n                        };\r\n                        if (!!this.dataChannel) return [3 /*break*/, 15];\r\n                        return [4 /*yield*/, waitForDataChannel()];\r\n                    case 14:\r\n                        _c.sent();\r\n                        _c.label = 15;\r\n                    case 15: return [2 /*return*/, {\r\n                            userData: userData,\r\n                            localPeerConnection: this.localPeerConnection,\r\n                            dataChannel: this.dataChannel,\r\n                            id: id\r\n                        }];\r\n                    case 16:\r\n                        error_3 = _c.sent();\r\n                        console.error(error_3.message);\r\n                        this.localPeerConnection.close();\r\n                        return [2 /*return*/, { error: error_3 }];\r\n                    case 17: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return ConnectionsManagerClient;\r\n}());\r\nexports.default = ConnectionsManagerClient;\r\n//# sourceMappingURL=connectionsManager.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/client/lib/wrtc/connectionsManager.js?')},"./node_modules/@geckos.io/client/lib/wrtc/peerConnection.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError("Generator is already executing.");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nvar constants_1 = __webpack_require__(/*! @geckos.io/common/lib/constants */ "./node_modules/@geckos.io/common/lib/constants.js");\r\nvar PeerConnection = /** @class */ (function () {\r\n    function PeerConnection() {\r\n    }\r\n    PeerConnection.prototype.connect = function (connectionsManager) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var webRTCPcSupported, _a, localPeerConnection, dataChannel, id, userData, error, error;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        webRTCPcSupported = RTCPeerConnection ||\r\n                            webkitRTCPeerConnection ||\r\n                            // @ts-ignore\r\n                            mozRTCPeerConnection;\r\n                        if (!webRTCPcSupported) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, connectionsManager.connect()];\r\n                    case 1:\r\n                        _a = _b.sent(), localPeerConnection = _a.localPeerConnection, dataChannel = _a.dataChannel, id = _a.id, userData = _a.userData, error = _a.error;\r\n                        if (error)\r\n                            return [2 /*return*/, { error: error }];\r\n                        if (!localPeerConnection || !dataChannel || !id || !userData)\r\n                            return [2 /*return*/, { error: new Error(\'Something went wrong in "await connectionsManager.connect()"\') }];\r\n                        this.localPeerConnection = localPeerConnection;\r\n                        this.dataChannel = dataChannel;\r\n                        this.id = id;\r\n                        return [2 /*return*/, { userData: userData }];\r\n                    case 2:\r\n                        error = new Error(constants_1.ERRORS.BROWSER_NOT_SUPPORTED);\r\n                        console.error(error.message);\r\n                        return [2 /*return*/, { error: error }];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    return PeerConnection;\r\n}());\r\nexports.default = PeerConnection;\r\n//# sourceMappingURL=peerConnection.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/client/lib/wrtc/peerConnection.js?')},"./node_modules/@geckos.io/common/lib/bridge.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { "default": mod };\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.Bridge = void 0;\r\nvar eventemitter3_1 = __importDefault(__webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js"));\r\nvar Bridge = /** @class */ (function () {\r\n    function Bridge() {\r\n        this.eventEmitter = new eventemitter3_1.default();\r\n    }\r\n    Bridge.prototype.emit = function (eventName, data, connection) {\r\n        if (connection === void 0) { connection = {}; }\r\n        this.eventEmitter.emit(eventName, data, connection);\r\n    };\r\n    Bridge.prototype.on = function (eventName, cb) {\r\n        return this.eventEmitter.on(eventName, function (data, options) {\r\n            cb(data, options);\r\n        });\r\n    };\r\n    Bridge.prototype.removeAllListeners = function () {\r\n        this.eventEmitter.removeAllListeners();\r\n    };\r\n    return Bridge;\r\n}());\r\nexports.Bridge = Bridge;\r\nvar bridge = new Bridge();\r\nexports.default = bridge;\r\n//# sourceMappingURL=bridge.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/bridge.js?')},"./node_modules/@geckos.io/common/lib/constants.js":(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.ERRORS = exports.EVENTS = void 0;\r\nvar EVENTS = {\r\n    SEND_OVER_DATA_CHANNEL: 'sendOverDataChannel',\r\n    RECEIVED_FROM_DATA_CHANNEL: 'receiveFromDataChannel',\r\n    DISCONNECTED: 'disconnected',\r\n    DISCONNECT: 'disconnect',\r\n    CONNECTION: 'connection',\r\n    CONNECT: 'connect',\r\n    ERROR: 'error',\r\n    DATA_CHANNEL_IS_OPEN: 'dataChannelIsOpen',\r\n    RAW_MESSAGE: 'rawMessage',\r\n    DROP: 'dropped'\r\n};\r\nexports.EVENTS = EVENTS;\r\nvar ERRORS = {\r\n    BROWSER_NOT_SUPPORTED: 'BROWSER_NOT_SUPPORTED',\r\n    COULD_NOT_PARSE_MESSAGE: 'COULD_NOT_PARSE_MESSAGE',\r\n    DROPPED_FROM_BUFFERING: 'DROPPED_FROM_BUFFERING',\r\n    MAX_MESSAGE_SIZE_EXCEEDED: 'MAX_MESSAGE_SIZE_EXCEEDED'\r\n};\r\nexports.ERRORS = ERRORS;\r\n//# sourceMappingURL=constants.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/constants.js?")},"./node_modules/@geckos.io/common/lib/helpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.isJSONString = exports.isObject = exports.isRawMessage = void 0;\r\nvar types_1 = __webpack_require__(/*! ./types */ \"./node_modules/@geckos.io/common/lib/types.js\");\r\nvar isRawMessage = function (data) {\r\n    return typeof data === 'string' || data instanceof ArrayBuffer || data instanceof types_1.ArrayBufferView;\r\n};\r\nexports.isRawMessage = isRawMessage;\r\nvar isObject = function (data) {\r\n    return typeof data === 'object';\r\n};\r\nexports.isObject = isObject;\r\nvar isJSONString = function (data) {\r\n    try {\r\n        // check if it is a string\r\n        if (typeof data !== 'string')\r\n            return false;\r\n        // check if it is a number as a string\r\n        if (!isNaN(parseInt(data)))\r\n            return false;\r\n        // check if it is a JSON object\r\n        JSON.parse(data);\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n};\r\nexports.isJSONString = isJSONString;\r\n//# sourceMappingURL=helpers.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/helpers.js?")},"./node_modules/@geckos.io/common/lib/makeRandomId.js":(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar makeRandomId = function (length) {\r\n    if (length === void 0) { length = 24; }\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var id = '';\r\n    for (var i = 0; i < length; i++) {\r\n        id += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return id;\r\n};\r\nexports.default = makeRandomId;\r\n//# sourceMappingURL=makeRandomId.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/makeRandomId.js?")},"./node_modules/@geckos.io/common/lib/parseMessage.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nvar constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@geckos.io/common/lib/constants.js");\r\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./node_modules/@geckos.io/common/lib/helpers.js");\r\nvar ParseMessage = function (ev) {\r\n    var data = ev.data;\r\n    var key;\r\n    var parsedData;\r\n    var JSONString = helpers_1.isJSONString(data);\r\n    if (!JSONString && helpers_1.isRawMessage(data)) {\r\n        key = constants_1.EVENTS.RAW_MESSAGE;\r\n        parsedData = data;\r\n    }\r\n    else if (JSONString) {\r\n        data = JSON.parse(data);\r\n        key = Object.keys(data)[0];\r\n        parsedData = data[key];\r\n    }\r\n    else {\r\n        key = \'error\';\r\n        parsedData = new Error(constants_1.ERRORS.COULD_NOT_PARSE_MESSAGE);\r\n    }\r\n    return { key: key, data: parsedData };\r\n};\r\nexports.default = ParseMessage;\r\n//# sourceMappingURL=parseMessage.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/parseMessage.js?')},"./node_modules/@geckos.io/common/lib/reliableMessage.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { "default": mod };\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.makeReliable = void 0;\r\nvar makeRandomId_1 = __importDefault(__webpack_require__(/*! ./makeRandomId */ "./node_modules/@geckos.io/common/lib/makeRandomId.js"));\r\nvar runInterval_1 = __importDefault(__webpack_require__(/*! ./runInterval */ "./node_modules/@geckos.io/common/lib/runInterval.js"));\r\nvar makeReliable = function (options, cb) {\r\n    var _a = options.interval, interval = _a === void 0 ? 150 : _a, _b = options.runs, runs = _b === void 0 ? 10 : _b;\r\n    var id = makeRandomId_1.default(24);\r\n    runInterval_1.default(interval, runs, function () {\r\n        cb(id);\r\n    });\r\n};\r\nexports.makeReliable = makeReliable;\r\n//# sourceMappingURL=reliableMessage.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/reliableMessage.js?')},"./node_modules/@geckos.io/common/lib/runInterval.js":(__unused_webpack_module,exports)=>{"use strict";eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar runInterval = function (interval, runs, cb) {\r\n    if (interval === void 0) { interval = 200; }\r\n    if (runs === void 0) { runs = 1; }\r\n    var counter = 0;\r\n    if (typeof cb !== 'function') {\r\n        console.error('You have to define your callback function!');\r\n        return;\r\n    }\r\n    var i = setInterval(function () {\r\n        cb();\r\n        counter++;\r\n        if (counter === runs - 1) {\r\n            clearInterval(i);\r\n        }\r\n    }, interval);\r\n    cb();\r\n};\r\nexports.default = runInterval;\r\n//# sourceMappingURL=runInterval.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/runInterval.js?")},"./node_modules/@geckos.io/common/lib/sendMessage.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nvar helpers_1 = __webpack_require__(/*! ./helpers */ "./node_modules/@geckos.io/common/lib/helpers.js");\r\nvar constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@geckos.io/common/lib/constants.js");\r\nvar SendMessage = function (dataChannel, maxMessageSize, eventName, data) {\r\n    var _a;\r\n    if (data === void 0) { data = null; }\r\n    var send = function (data) {\r\n        var _a;\r\n        var bytes = (_a = data.byteLength) !== null && _a !== void 0 ? _a : data.length * 2; // (times 2 for characters that uses 2 bytes per char)\r\n        if (typeof maxMessageSize === \'number\' && bytes > maxMessageSize) {\r\n            throw new Error("maxMessageSize of " + maxMessageSize + " exceeded");\r\n        }\r\n        else {\r\n            Promise.resolve().then(function () {\r\n                dataChannel.send(data);\r\n            });\r\n        }\r\n    };\r\n    if (dataChannel.readyState === \'open\') {\r\n        try {\r\n            if (eventName === constants_1.EVENTS.RAW_MESSAGE && data !== null && helpers_1.isRawMessage(data)) {\r\n                send(data);\r\n            }\r\n            else {\r\n                send(JSON.stringify((_a = {}, _a[eventName] = data, _a)));\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\'Error in sendMessage.ts: \', error.message);\r\n            return error;\r\n        }\r\n    }\r\n};\r\nexports.default = SendMessage;\r\n//# sourceMappingURL=sendMessage.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/sendMessage.js?')},"./node_modules/@geckos.io/common/lib/types.js":(__unused_webpack_module,exports)=>{"use strict";eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.ArrayBufferView = void 0;\r\nvar ArrayBufferView = Object.getPrototypeOf(Object.getPrototypeOf(new Uint8Array())).constructor;\r\nexports.ArrayBufferView = ArrayBufferView;\r\n//# sourceMappingURL=types.js.map\n\n//# sourceURL=webpack://specters.io/./node_modules/@geckos.io/common/lib/types.js?')},"./client/camera.js":module=>{eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Animator = /*#__PURE__*/function () {\n  function Animator(frame_set, delay) {\n    _classCallCheck(this, Animator);\n\n    this.count = 0;\n    this.delay = delay;\n    this.frame_set = frame_set; // animation frames\n\n    this.frame_index = 0; // playhead\n\n    this.frame_value = frame_set[0]; // current frame\n  }\n\n  _createClass(Animator, [{\n    key: "animate",\n    value: function animate() {\n      this.count++;\n\n      if (this.count > this.delay) {\n        this.count = 0;\n        this.frame_index = this.frame_index == this.frame_set.length - 1 ? 0 : this.frame_index + 1;\n        this.frame_value = this.frame_set[this.frame_index];\n      }\n    }\n  }]);\n\n  return Animator;\n}();\n\nmodule.exports = /*#__PURE__*/function () {\n  function Camera(w, h, map) {\n    _classCallCheck(this, Camera);\n\n    this.y = 0;\n    this.x = 0;\n    this.w = w;\n    this.h = h;\n    this.maxX = map.cols * map.tsize - w;\n    this.maxY = map.rows * map.tsize - h;\n    this.following = null;\n    this.tilesetImage = null;\n    this.animations = {\n      22: new Animator([22, 23, 24, 25, 26, 38], 16),\n      28: new Animator([29, 30, 31, 32, 38, 28], 16),\n      33: new Animator([38, 33, 34, 35, 36, 37], 16)\n    };\n  }\n\n  _createClass(Camera, [{\n    key: "follow",\n    value: function follow(me) {\n      this.following = me;\n      me.screenX = this.w / 2;\n      me.screenY = this.h / 2;\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      // Center player on screen\n      // this.following.screenX = this.w / 2;\n      // this.following.screenY = this.h / 2;\n      // camera follow the player\n      this.x = this.following.x - this.w / 2;\n      this.y = this.following.y - this.h / 2;\n    }\n  }, {\n    key: "draw",\n    value: function draw(ctx, map) {\n      Object.values(this.animations).forEach(function (animator) {\n        animator.animate();\n      });\n      var startCol = Math.floor(this.x / map.tsize);\n      var endCol = startCol + this.w / map.tsize + 1;\n      var startRow = Math.floor(this.y / map.tsize);\n      var endRow = startRow + this.h / map.tsize + 1;\n      var offsetX = -this.x + startCol * map.tsize;\n      var offsetY = -this.y + startRow * map.tsize;\n\n      for (var c = startCol; c <= endCol; c++) {\n        for (var r = startRow; r <= endRow; r++) {\n          var tile = map.getTile(c, r);\n          var x = (c - startCol) * map.tsize + offsetX;\n          var y = (r - startRow) * map.tsize + offsetY;\n\n          if (tile == 57 || tile == 37) {\n            ctx.fillStyle = tile == 57 ? "#252525" : "#ff0000";\n            ctx.fillRect(Math.floor(x), Math.floor(y), map.tsize, map.tsize);\n          } else {\n            if (this.animations[tile]) {\n              tile = this.animations[tile].frame_value;\n            }\n\n            ctx.drawImage(this.tilesetImage, Math.floor((tile - 1) * map.tsize), 0, map.tsize, map.tsize, Math.floor(x), Math.floor(y), map.tsize, map.tsize);\n          }\n        }\n      }\n    }\n  }]);\n\n  return Camera;\n}();\n\n//# sourceURL=webpack://specters.io/./client/camera.js?')},"./client/game.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Map = __webpack_require__(/*! ../shared/map */ \"./shared/map.js\");\n\nvar Camera = __webpack_require__(/*! ./camera */ \"./client/camera.js\");\n\nvar State = __webpack_require__(/*! ./state */ \"./client/state.js\");\n\nvar Render = __webpack_require__(/*! ./render */ \"./client/render.js\");\n\nvar Input = __webpack_require__(/*! ./input */ \"./client/input.js\");\n\nvar Network = __webpack_require__(/*! ./network */ \"./client/network.js\");\n\nvar _require = __webpack_require__(/*! howler */ \"./node_modules/howler/dist/howler.js\"),\n    Howl = _require.Howl;\n\nvar _require2 = __webpack_require__(/*! ./util/validations */ \"./client/util/validations.js\"),\n    validateName = _require2.validateName;\n\nvar Loader = __webpack_require__(/*! ./util/loader */ \"./client/util/loader.js\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function Game() {\n    var _this = this;\n\n    _classCallCheck(this, Game);\n\n    this.leaderBoardWrapper = document.getElementById('leaderboard-wrapper');\n    this.leaderBoard = document.getElementById('leaderboard');\n    this.playAgainModal = document.getElementById('play-again-modal');\n    this.playAgainForm = document.getElementById('play-again-form');\n    this.namePlayAgainTextField = document.getElementById('name-play-again');\n    this.killsElement = document.getElementById('kills');\n    this.playAgainForm.addEventListener(\"submit\", function (e) {\n      e.preventDefault();\n      _this.playAgainModal.style.display = 'none';\n\n      _this.init();\n\n      _this.start(validateName(_this.namePlayAgainTextField.value));\n    });\n    this.canvas = document.getElementById('canvas');\n    this.canvas.style.background = \"black\";\n    this.ctx = this.canvas.getContext('2d');\n    this.loader = new Loader();\n    this.kills = 0;\n    this.gameWidth = 640;\n    this.gameHeight = 360;\n    this.cwidth = window.innerWidth - 4;\n    this.cheight = window.innerHeight - 4;\n    this.resizeCanvas.bind(this);\n    window.addEventListener(\"resize\", function () {\n      _this.resizeCanvas();\n    });\n    this.init();\n  }\n\n  _createClass(Game, [{\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      this.attackSound = new Howl({\n        src: ['./sounds/attack.mp3'],\n        volume: 1\n      });\n      this.dieSound = new Howl({\n        src: ['./sounds/die.mp3'],\n        volume: 0.4\n      });\n      this.map = new Map();\n      this.camera = new Camera(this.gameWidth, this.gameHeight, this.map);\n      this.state = new State();\n      this.network = new Network();\n\n      window.onbeforeunload = function () {\n        _this2.network.channel.close();\n      };\n\n      this.render = new Render();\n      this.input = new Input();\n      this.loopRef = null;\n      this.gameOver = this.gameOver.bind(this);\n      this.resizeCanvas();\n    }\n  }, {\n    key: \"resizeCanvas\",\n    value: function resizeCanvas() {\n      this.cwidth = window.innerWidth - 4;\n      this.cheight = window.innerHeight - 4;\n      var ratio = 16 / 9;\n\n      if (this.cheight < this.cwidth / ratio) {\n        this.cwidth = this.cheight * ratio;\n      } else {\n        this.cheight = this.cwidth / ratio;\n      }\n\n      this.canvas.width = this.gameWidth;\n      this.canvas.height = this.gameHeight;\n      this.canvas.style.width = '' + this.cwidth + 'px';\n      this.canvas.style.height = '' + this.cheight + 'px';\n      this.ctx.mozImageSmoothingEnabled = false;\n      this.ctx.webkitImageSmoothingEnabled = false;\n      this.ctx.msImageSmoothingEnabled = false;\n      this.ctx.imageSmoothingEnabled = false;\n      this.leaderBoardWrapper.style.marginRight = this.canvas.getBoundingClientRect().left;\n    }\n  }, {\n    key: \"updateLeaderBoard\",\n    value: function updateLeaderBoard(leaderBoard, context) {\n      var liList = context.leaderBoard.children;\n\n      for (var i = 0; i < liList.length; i++) {\n        var player = leaderBoard[i];\n        var nameEl = liList[i].children[0];\n        var scoreEl = liList[i].children[1];\n        var highlight = '';\n\n        if (player) {\n          if (player.id == context.render.meId) {\n            console.log(player.id, context.render.meId);\n            highlight = '>';\n          }\n\n          nameEl.innerText = highlight + (i == 5 ? '?.-' : i + 1 + '.' + player.name);\n          scoreEl.innerText = player.score;\n        } else {\n          nameEl.innerText = highlight + (i == 5 ? '?.-' : i + 1 + '.-');\n          scoreEl.innerText = '-';\n        }\n      }\n\n      context.leaderBoardWrapper.style.marginRight = context.canvas.getBoundingClientRect().left;\n    }\n  }, {\n    key: \"gameOver\",\n    value: function gameOver() {\n      this.network.channel.close();\n      clearInterval(this.loopRef);\n      this.playAgainModal.style.display = \"block\";\n      this.killsElement.innerText = this.kills + \" Kills\";\n      this.namePlayAgainTextField.value = localStorage.getItem('name') ? localStorage.getItem('name') : 'unnamed';\n    } // Main Loop\n\n  }, {\n    key: \"run\",\n    value: function run() {\n      // get update\n      var _this$state$getCurren = this.state.getCurrentState(),\n          me = _this$state$getCurren.me,\n          otherPlayers = _this$state$getCurren.otherPlayers,\n          bullets = _this$state$getCurren.bullets;\n\n      if (!me) return;\n      this.kills = me.kills;\n      this.camera.follow(me);\n      this.camera.update();\n      this.camera.following.scX = this.cwidth / 2;\n      this.camera.following.scY = this.cheight / 2; // clear screen\n\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // draw\n\n      this.camera.draw(this.ctx, this.map);\n      this.render.drawPlayer(this.ctx, me, this.gameOver, this.attackSound, this.dieSound, this.kills);\n      this.render.drawPlayers(this.ctx, otherPlayers, bullets, this.camera, this.attackSound, this.dieSound);\n    }\n  }, {\n    key: \"start\",\n    value: function start(playerName) {\n      var _this3 = this;\n\n      this.canvas.style.display = 'block';\n      this.network.start(playerName);\n      this.input.listen(this.network, this.camera, this.canvas);\n      Promise.all([this.loader.loadImage('ghost', 'images/ghost.png'), this.loader.loadImage('tileset', 'images/tileset.png'), this.loader.loadImage('projectile', 'images/projectile.png'), this.network.connect(this.state, this.loopRef, this.render, this.updateLeaderBoard, this)]).then(function () {\n        _this3.loopRef = setInterval(_this3.run.bind(_this3), 1000 / 60);\n        _this3.render.playerImage = _this3.loader.getImage('ghost');\n        _this3.camera.tilesetImage = _this3.loader.getImage('tileset');\n        _this3.render.projectileImage = _this3.loader.getImage('projectile');\n        _this3.leaderBoardWrapper.style.marginRight = _this3.canvas.getBoundingClientRect().left;\n        _this3.leaderBoardWrapper.style.display = 'block';\n      });\n    }\n  }]);\n\n  return Game;\n}();\n\n//# sourceURL=webpack://specters.io/./client/game.js?")},"./client/input.js":module=>{eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function Input() {\n    _classCallCheck(this, Input);\n  }\n\n  _createClass(Input, [{\n    key: \"listen\",\n    value: function listen(network, camera, canvas) {\n      var _this = this;\n\n      document.addEventListener('keydown', function (e) {\n        return _this.handleKeyBoardInput(e, true, network);\n      });\n      document.addEventListener('keyup', function (e) {\n        return _this.handleKeyBoardInput(e, false, network);\n      });\n      document.addEventListener('mousemove', function (e) {\n        return _this.handleMouseMove(e, network, camera, canvas);\n      }, true);\n      document.addEventListener('click', function () {\n        return _this.handleMouseClick(network);\n      }, true);\n    } // stopListen(network, camera) {\n    //     document.removeEventListener('keydown', (e) => this.handleKeyBoardInput(e, true, network));\n    //     document.removeEventListener('keyup', (e) => this.handleKeyBoardInput(e, false, network));\n    //     document.removeEventListener('mousemove', (e) => this.handleMouseMove(e, network, camera));\n    //     document.removeEventListener('click', () => this.handleMouseClick(network));\n    // }\n\n  }, {\n    key: \"isDirection\",\n    value: function isDirection(code) {\n      return code == 68 || code == 39 || code == 83 || code == 40 || code == 65 || code == 37 || code == 87 || code == 38;\n    }\n  }, {\n    key: \"handleKeyBoardInput\",\n    value: function handleKeyBoardInput(e, value, network) {\n      console.log('input');\n      if (this.isDirection(e.which)) network.channel.emit('ik', [e.which, value]);\n    }\n  }, {\n    key: \"handleMouseClick\",\n    value: function handleMouseClick(network) {\n      network.channel.emit('imc');\n    }\n  }, {\n    key: \"handleMouseMove\",\n    value: function handleMouseMove(e, network, camera, canvas) {\n      if (camera.following) {\n        var distX = e.clientX - canvas.getBoundingClientRect().left - camera.following.scX;\n        var distY = e.clientY - canvas.getBoundingClientRect().top - camera.following.scY;\n        network.channel.emit('imm', [distX, distY]);\n      }\n    }\n  }]);\n\n  return Input;\n}();\n\n//# sourceURL=webpack://specters.io/./client/input.js?")},"./client/network.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar geckos = __webpack_require__(/*! @geckos.io/client */ \"./node_modules/@geckos.io/client/lib/index.js\").default;\n\nmodule.exports = /*#__PURE__*/function () {\n  function Network() {\n    _classCallCheck(this, Network);\n  }\n\n  _createClass(Network, [{\n    key: \"start\",\n    value: function start(name) {\n      var _this = this;\n\n      this.name = name;\n      this.channel = geckos({\n        port: 3000\n      });\n      this.connectPromise = new Promise(function (resolve, reject) {\n        _this.channel.onConnect(function (error) {\n          if (error) {\n            console.error(error.message);\n            reject();\n          }\n\n          _this.channel.emit('join', _this.name);\n\n          resolve(_this.channel.id);\n        });\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(state, loopRef, render, updateLeaderBoard, gameCtx) {\n      var _this2 = this;\n\n      this.connectPromise.then(function (socketId) {\n        render.meId = socketId;\n        render.playerName = localStorage.getItem('name');\n\n        _this2.channel.on('update', function (newUpdate) {\n          state.handleUpdate(newUpdate);\n        });\n\n        _this2.channel.onDisconnect(function () {\n          clearInterval(loopRef);\n        });\n\n        _this2.channel.on('leaderboard', function (leaderboard) {\n          var deserialized = leaderboard.map(function (buffer) {\n            return _this2.deserializeLeaderBoard(buffer);\n          });\n          updateLeaderBoard(deserialized, gameCtx);\n        });\n\n        _this2.channel.on('attack', function (id) {\n          render.attackList.push(id);\n        });\n\n        _this2.channel.on('die', function (id) {\n          render.dieList.push(id);\n        });\n      });\n    }\n  }, {\n    key: \"deserializeLeaderBoard\",\n    value: function deserializeLeaderBoard(buffer) {\n      return {\n        id: buffer[0],\n        name: buffer[1],\n        score: buffer[2]\n      };\n    }\n  }]);\n\n  return Network;\n}();\n\n//# sourceURL=webpack://specters.io/./client/network.js?")},"./client/pixelCanvas.js":module=>{eval("function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function pixelCanvas() {\n    _classCallCheck(this, pixelCanvas);\n\n    this.letters = letters = {\n      'A': [[, 1], [1,, 1], [1,, 1], [1, 1, 1], [1,, 1]],\n      'B': [[1, 1], [1,, 1], [1, 1, 1], [1,, 1], [1, 1]],\n      'C': [[1, 1, 1], [1], [1], [1], [1, 1, 1]],\n      'D': [[1, 1], [1,, 1], [1,, 1], [1,, 1], [1, 1]],\n      'E': [[1, 1, 1], [1], [1, 1, 1], [1], [1, 1, 1]],\n      'F': [[1, 1, 1], [1], [1, 1], [1], [1]],\n      'G': [[, 1, 1], [1], [1,, 1, 1], [1,,, 1], [, 1, 1]],\n      'H': [[1,, 1], [1,, 1], [1, 1, 1], [1,, 1], [1,, 1]],\n      'I': [[1, 1, 1], [, 1], [, 1], [, 1], [1, 1, 1]],\n      'J': [[1, 1, 1], [,, 1], [,, 1], [1,, 1], [1, 1, 1]],\n      'K': [[1,,, 1], [1,, 1], [1, 1], [1,, 1], [1,,, 1]],\n      'L': [[1], [1], [1], [1], [1, 1, 1]],\n      'M': [[1, 1, 1, 1, 1], [1,, 1,, 1], [1,, 1,, 1], [1,,,, 1], [1,,,, 1]],\n      'N': [[1,,, 1], [1, 1,, 1], [1,, 1, 1], [1,,, 1], [1,,, 1]],\n      'O': [[1, 1, 1], [1,, 1], [1,, 1], [1,, 1], [1, 1, 1]],\n      'P': [[1, 1, 1], [1,, 1], [1, 1, 1], [1], [1]],\n      'Q': [[0, 1, 1], [1,,, 1], [1,,, 1], [1,, 1, 1], [1, 1, 1, 1]],\n      'R': [[1, 1], [1,, 1], [1,, 1], [1, 1], [1,, 1]],\n      'S': [[1, 1, 1], [1], [1, 1, 1], [,, 1], [1, 1, 1]],\n      'T': [[1, 1, 1], [, 1], [, 1], [, 1], [, 1]],\n      'U': [[1,, 1], [1,, 1], [1,, 1], [1,, 1], [1, 1, 1]],\n      'V': [[1,,,, 1], [1,,,, 1], [, 1,, 1], [, 1,, 1], [,, 1]],\n      'W': [[1,,,, 1], [1,,,, 1], [1,,,, 1], [1,, 1,, 1], [1, 1, 1, 1, 1]],\n      'X': [[1,,,, 1], [, 1,, 1], [,, 1], [, 1,, 1], [1,,,, 1]],\n      'Y': [[1,, 1], [1,, 1], [, 1], [, 1], [, 1]],\n      'Z': [[1, 1, 1, 1, 1], [,,, 1], [,, 1], [, 1], [1, 1, 1, 1, 1]],\n      '0': [[1, 1, 1], [1,, 1], [1,, 1], [1,, 1], [1, 1, 1]],\n      '1': [[, 1], [, 1], [, 1], [, 1], [, 1]],\n      ' ': [[,,], [,,], [,,], [,,], [,,]]\n    };\n  }\n\n  _createClass(pixelCanvas, [{\n    key: \"drawName\",\n    value: function drawName(ctx, string, size, cx, cy) {\n      var needed = [];\n      string = string.toUpperCase(); // because I only did uppercase letters\n\n      for (var i = 0; i < string.length; i++) {\n        var letter = this.letters[string.charAt(i)];\n\n        if (letter) {\n          // because there's letters I didn't do\n          needed.push(letter);\n        }\n      }\n\n      ctx.fillStyle = '#fff';\n      var currX = cx;\n\n      for (i = 0; i < needed.length; i++) {\n        letter = needed[i];\n        var currY = cy;\n        var addX = 0;\n\n        for (var y = 0; y < letter.length; y++) {\n          var row = letter[y];\n\n          for (var x = 0; x < row.length; x++) {\n            if (row[x]) {\n              ctx.fillRect(currX + x * size, currY, size, size);\n            }\n          }\n\n          addX = Math.max(addX, row.length * size);\n          currY += size;\n        }\n\n        currX += size + addX;\n      }\n    }\n  }]);\n\n  return pixelCanvas;\n}();\n\n//# sourceURL=webpack://specters.io/./client/pixelCanvas.js?")},"./client/render.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar PixelCanvas = __webpack_require__(/*! ./pixelCanvas */ "./client/pixelCanvas.js");\n\nmodule.exports = /*#__PURE__*/function () {\n  function Render() {\n    _classCallCheck(this, Render);\n\n    this.pixelCanvas = new PixelCanvas();\n    this.attackList = [];\n    this.dieList = []; // me\n\n    this.meId = \'\';\n    this.playerName = \'Unammed\';\n    this.playerImage = null;\n    this.currentFrame = 0;\n    this.animationTime = Date.now();\n    this.animationDuration = 100;\n    this.meRay = 28; // me attack\n\n    this.attackAnimation = false;\n    this.dieAnimation = false; // other\n\n    this.ocurrentFrame = {};\n    this.oanimationTime = {};\n    this.oanimationDuration = 100; // other attack\n\n    this.oattackAnimation = {};\n    this.odieAnimation = {}; // projectile\n\n    this.projectileImage = null;\n    this.bulletRay = 10;\n  }\n\n  _createClass(Render, [{\n    key: "drawPlayer",\n    value: function drawPlayer(ctx, me, gameOver, attackSound, dieSound, kills) {\n      var _this = this;\n\n      var sizeIncrease = kills * 4; // ctx.fillStyle = \'yellow\';\n      // ctx.beginPath();\n      // ctx.arc(me.screenX, me.screenY, this.meRay/2 + sizeIncrease/2, 0, 2 * Math.PI);\n      // ctx.fill();\n\n      var col;\n      var angle = 180 * me.angle / Math.PI;\n      if (angle < 0) angle = 360 + angle;\n\n      if (this.attackList.length > 0 && this.attackList.includes(this.meId)) {\n        this.currentFrame = 0;\n        this.attackAnimation = true;\n        this.attackList.splice(this.attackList.findIndex(function (id) {\n          return _this.meId == id;\n        }), 1);\n        attackSound.play();\n      }\n\n      if (this.dieList.length > 0 && this.dieList.includes(this.meId)) {\n        this.attackAnimation = false;\n        this.currentFrame = 0;\n        this.dieAnimation = true;\n        this.dieList.splice(this.dieList.findIndex(function (id) {\n          return _this.meId == id;\n        }), 1);\n        dieSound.play();\n      } else {\n        if (angle >= 45 && angle < 135) {\n          //right\n          col = this.attackAnimation ? 5 : 1;\n        } else if (angle >= 135 && angle < 225) {\n          // down\n          col = this.attackAnimation ? 6 : 2;\n        } else if (angle >= 225 && angle < 315) {\n          // left\n          col = this.attackAnimation ? 4 : 0;\n        } else {\n          // top\n          col = this.attackAnimation ? 7 : 3;\n        }\n      }\n\n      if (this.dieAnimation) col = 8;\n      var totalFrames = this.attackAnimation ? 3 : 5;\n\n      if (this.dieAnimation) {\n        totalFrames = 5;\n      }\n\n      if (Date.now() - this.animationDuration >= this.animationTime) {\n        this.currentFrame = this.currentFrame >= totalFrames ? 0 : this.currentFrame + 1;\n        this.animationTime = Date.now();\n      }\n\n      if (this.dieAnimation && this.currentFrame == totalFrames && totalFrames == 5) {\n        this.dieAnimation = false;\n        gameOver();\n      }\n\n      if (this.attackAnimation && this.currentFrame == totalFrames && totalFrames == 3) {\n        this.attackAnimation = false;\n      }\n\n      var playerSizeIncrease = sizeIncrease / 2 + this.meRay / 2;\n      ctx.drawImage(this.playerImage, this.currentFrame * this.meRay, col * 26, this.meRay, 26, me.screenX - playerSizeIncrease, me.screenY - playerSizeIncrease, this.meRay + sizeIncrease, 26 + sizeIncrease);\n      this.pixelCanvas.drawName(ctx, this.playerName, 1, Math.floor(me.screenX - this.playerName.length * 2), Math.floor(me.screenY - playerSizeIncrease - 7));\n    }\n  }, {\n    key: "drawPlayers",\n    value: function drawPlayers(ctx, otherPlayers, bullets, camera, attackSound, dieSound) {\n      var _this2 = this;\n\n      otherPlayers.forEach(function (p, index) {\n        return _this2.drawOther(ctx, p, camera, p.id, attackSound, dieSound);\n      });\n      bullets.forEach(function (b) {\n        return _this2.drawBullet(ctx, b, camera);\n      });\n    }\n  }, {\n    key: "drawOther",\n    value: function drawOther(ctx, p, camera, index, attackSound, dieSound) {\n      var sizeIncrease = p.kills * 4; // ctx.fillStyle = p.color;\n      // ctx.beginPath();\n      // ctx.arc(p.x - camera.x, p.y - camera.y, p.r, 0, 2 * Math.PI);\n      // ctx.fill();\n\n      if (this.oanimationTime[index] == null) {\n        this.oanimationTime[index] = 0;\n      }\n\n      if (this.ocurrentFrame[index] == null) {\n        this.ocurrentFrame[index] = 0;\n      }\n\n      var angle = 180 * p.angle / Math.PI;\n      if (angle < 0) angle = 360 + angle;\n\n      if (this.attackList.length > 0 && this.attackList.includes(p.id)) {\n        this.ocurrentFrame[index] = 0;\n        this.oattackAnimation[index] = true;\n        this.attackList.splice(this.attackList.findIndex(function (id) {\n          return p.id == id;\n        }), 1);\n        attackSound.play();\n      }\n\n      if (this.dieList.length > 0 && this.dieList.includes(p.id)) {\n        this.oattackAnimation[index] = false;\n        this.ocurrentFrame[index] = 0;\n        this.odieAnimation[index] = true;\n        this.dieList.splice(this.dieList.findIndex(function (id) {\n          return p.id == id;\n        }), 1);\n        dieSound.play();\n      }\n\n      var col;\n\n      if (angle >= 45 && angle < 135) {\n        //right\n        col = this.oattackAnimation[index] ? 5 : 1;\n      } else if (angle >= 135 && angle < 225) {\n        // down\n        col = this.oattackAnimation[index] ? 6 : 2;\n      } else if (angle >= 225 && angle < 315) {\n        // left\n        col = this.oattackAnimation[index] ? 4 : 0;\n      } else {\n        // top\n        col = this.oattackAnimation[index] ? 7 : 3;\n      }\n\n      if (this.odieAnimation[index]) col = 8;\n      var totalFrames = this.oattackAnimation[index] ? 3 : 5;\n\n      if (this.odieAnimation[index]) {\n        totalFrames = 5;\n      }\n\n      if (Date.now() - this.oanimationDuration >= this.oanimationTime[index]) {\n        this.ocurrentFrame[index] = this.ocurrentFrame[index] >= totalFrames ? 0 : this.ocurrentFrame[index] + 1;\n        this.oanimationTime[index] = Date.now();\n      }\n\n      if (this.dieAnimation[index] && this.currentFrame[index] == totalFrames && totalFrames == 5) {\n        this.dieAnimation[index] = false;\n      }\n\n      if (this.oattackAnimation[index] && this.ocurrentFrame[index] == 3 && totalFrames == 3) {\n        this.oattackAnimation[index] = false;\n      }\n\n      var playerSizeIncrease = sizeIncrease / 2 + this.meRay / 2;\n      ctx.drawImage(this.playerImage, this.ocurrentFrame[index] * this.meRay, col * 26, this.meRay, 26, p.x - playerSizeIncrease - camera.x, p.y - playerSizeIncrease - camera.y, this.meRay + sizeIncrease, 26 + sizeIncrease);\n      this.pixelCanvas.drawName(ctx, p.name, 1, Math.floor(p.x - camera.x - p.name.length * 2), Math.floor(p.y - this.meRay - camera.y + 7));\n    }\n  }, {\n    key: "drawBullet",\n    value: function drawBullet(ctx, p, camera) {\n      // ctx.fillStyle = \'yellow\';\n      // ctx.beginPath();\n      // ctx.arc(p.x - this.bulletRay - camera.x, p.y - this.bulletRay - camera.y, this.bulletRay/2, 0, 2 * Math.PI);\n      // ctx.fill();\n      ctx.save();\n      ctx.translate(p.x - camera.x, p.y - camera.y);\n      ctx.rotate(Math.PI + p.angle);\n      ctx.translate(-(p.x - camera.x), -(p.y - camera.y));\n      console.log(p.r);\n      ctx.drawImage(this.projectileImage, 0, 0, this.bulletRay, this.bulletRay, p.x - p.r / 2 - camera.x, p.y - p.r - camera.y, p.r, p.r);\n      ctx.restore();\n    }\n  }]);\n\n  return Render;\n}();\n\n//# sourceURL=webpack://specters.io/./client/render.js?')},"./client/state.js":module=>{eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function State() {\n    _classCallCheck(this, State);\n\n    this.firstServerTimestamp = 0;\n    this.gameStart = 0;\n    this.updates = [];\n    this.RENDER_DELAY = 100;\n  }\n\n  _createClass(State, [{\n    key: "currentServerTime",\n    value: function currentServerTime() {\n      return this.firstServerTimestamp + (Date.now() - this.gameStart) - this.RENDER_DELAY;\n    }\n  }, {\n    key: "getBaseUpdate",\n    value: function getBaseUpdate() {\n      var serverTime = this.currentServerTime();\n\n      for (var i = this.updates.length - 1; i >= 0; i--) {\n        if (this.updates[i].t <= serverTime) {\n          return i;\n        }\n      }\n\n      return -1;\n    } // handle Update\n\n  }, {\n    key: "getCurrentState",\n    value: function getCurrentState() {\n      if (!this.firstServerTimestamp) {\n        return {};\n      }\n\n      var base = this.getBaseUpdate();\n      var serverTime = this.currentServerTime(); // console.log(this.updates.length);\n\n      if (base < 0 || base === this.updates.length - 1) {\n        return this.updates[this.updates.length - 1];\n      } else {\n        var baseUpdate = this.updates[base];\n        var next = this.updates[base + 1];\n        var ratio = (serverTime - baseUpdate.t) / (next.t - baseUpdate.t);\n        return {\n          me: this.interpolateObject(baseUpdate.me, next.me, ratio),\n          otherPlayers: this.interpolateObjectArray(baseUpdate.otherPlayers, next.otherPlayers, ratio),\n          bullets: this.interpolateObjectArray(baseUpdate.bullets, next.bullets, ratio)\n        };\n      }\n    }\n  }, {\n    key: "interpolateObject",\n    value: function interpolateObject(object1, object2, ratio) {\n      if (!object2) {\n        return object1;\n      }\n\n      var interpolated = {};\n      Object.keys(object1).forEach(function (key) {\n        if (key == \'x\' || key == \'y\') {\n          interpolated[key] = object1[key] + (object2[key] - object1[key]) * ratio;\n        } else interpolated[key] = object2[key];\n      });\n      return interpolated;\n    }\n  }, {\n    key: "interpolateObjectArray",\n    value: function interpolateObjectArray(objects1, objects2, ratio) {\n      var _this = this;\n\n      return objects1.map(function (o) {\n        return _this.interpolateObject(o, objects2.find(function (o2) {\n          return o.id === o2.id;\n        }), ratio);\n      });\n    }\n  }, {\n    key: "deserialize",\n    value: function deserialize(updateBuffer) {\n      var _this2 = this;\n\n      var me = this.deserializeMe(updateBuffer[0]);\n      var otherPlayers = updateBuffer[1].map(function (buffer) {\n        return _this2.deserializeOthers(buffer);\n      });\n      var bullets = updateBuffer[2].map(function (buffer) {\n        return _this2.deserializeBullet(buffer);\n      });\n      var t = updateBuffer[3];\n      return {\n        me: me,\n        otherPlayers: otherPlayers,\n        bullets: bullets,\n        t: t\n      };\n    }\n  }, {\n    key: "deserializeMe",\n    value: function deserializeMe(buffer) {\n      return {\n        x: buffer[0],\n        y: buffer[1],\n        angle: buffer[2],\n        kills: buffer[3]\n      };\n    }\n  }, {\n    key: "deserializeOthers",\n    value: function deserializeOthers(buffer) {\n      return {\n        id: buffer[0],\n        name: buffer[1],\n        x: buffer[2],\n        y: buffer[3],\n        angle: buffer[4],\n        kills: buffer[5]\n      };\n    }\n  }, {\n    key: "deserializeBullet",\n    value: function deserializeBullet(buffer) {\n      return {\n        id: buffer[0],\n        x: buffer[1],\n        y: buffer[2],\n        angle: buffer[3],\n        r: buffer[4]\n      };\n    }\n  }, {\n    key: "deserializeLeaderBoard",\n    value: function deserializeLeaderBoard(buffer) {\n      return {\n        name: buffer[0],\n        score: buffer[1]\n      };\n    }\n  }, {\n    key: "handleUpdate",\n    value: function handleUpdate(updateBuffer) {\n      var newUpdate = this.deserialize(updateBuffer);\n\n      if (!this.firstServerTimestamp) {\n        this.firstServerTimestamp = newUpdate.t;\n        this.gameStart = Date.now();\n      }\n\n      this.updates.push(newUpdate);\n      var base = this.getBaseUpdate();\n\n      if (base > 0) {\n        this.updates.splice(0, base);\n      }\n    }\n  }]);\n\n  return State;\n}();\n\n//# sourceURL=webpack://specters.io/./client/state.js?')},"./client/util/loader.js":module=>{eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function Loader() {\n    _classCallCheck(this, Loader);\n\n    this.images = {};\n  }\n\n  _createClass(Loader, [{\n    key: "loadImage",\n    value: function loadImage(name, src) {\n      var _this = this;\n\n      var img = new Image();\n      return new Promise(function (resolve, reject) {\n        _this.images[name] = img;\n\n        _this.images[name].onload = function () {\n          resolve(img);\n        };\n\n        _this.images[name].onerror = function () {\n          console.log(\'Error on load \' + src);\n          reject(false);\n        };\n\n        img.src = src;\n      });\n    }\n  }, {\n    key: "getImage",\n    value: function getImage(name) {\n      return name in this.images ? this.images[name] : null;\n    }\n  }]);\n\n  return Loader;\n}();\n\n//# sourceURL=webpack://specters.io/./client/util/loader.js?')},"./client/util/validations.js":module=>{eval("function validateName(name) {\n  var nameNoSpace = name.trim();\n  console.log(nameNoSpace);\n  nameNoSpace = nameNoSpace === \"\" ? 'Unammed' : nameNoSpace;\n  localStorage.removeItem('name');\n  localStorage.setItem('name', nameNoSpace);\n  return nameNoSpace;\n} // var letters = /^[A-Za-z]+$/;\n//       if(inputtxt.value.match(letters))\n\n\nmodule.exports = {\n  validateName: validateName\n};\n\n//# sourceURL=webpack://specters.io/./client/util/validations.js?")},"./shared/map.js":module=>{eval('function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nmodule.exports = /*#__PURE__*/function () {\n  function Map() {\n    _classCallCheck(this, Map);\n\n    this.cols = 50;\n    this.rows = 50;\n    this.tsize = 57;\n    this.tilesn  }\n\n  _createClass(Map, [{\n    key: "getTile",\n    value: function getTile(col, row) {\n      return this.tiles[row * this.cols + col];\n    }\n  }, {\n    key: "isPositionLava",\n    value: function isPositionLava(player, kills) {\n      var sizeIncrease = kills * 4;\n      var tileX = Math.floor(player.x / this.tsize);\n      var tileY = Math.floor((player.y + 11 + sizeIncrease / 2) / this.tsize);\n      var checkTile = this.tiles[tileY * this.cols + tileX];\n      return checkTile == 38 || checkTile == 22 || checkTile == 28 || checkTile == 33;\n    }\n  }]);\n\n  return Map;\n}();\n\n//# sourceURL=webpack://specters.io/./shared/map.js?')},"./node_modules/eventemitter3/index.js":module=>{"use strict";eval("\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif (true) {\n  module.exports = EventEmitter;\n}\n\n\n//# sourceURL=webpack://specters.io/./node_modules/eventemitter3/index.js?")},"./node_modules/howler/dist/howler.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var checkOpera = self._navigator && self._navigator.userAgent.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        webm: !!audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, ''),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n\n          var listener = function() {\n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return self;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            self._emit('seek', id);\n\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (true) {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof __webpack_require__.g !== 'undefined') {\n    __webpack_require__.g.HowlerGlobal = HowlerGlobal;\n    __webpack_require__.g.Howler = Howler;\n    __webpack_require__.g.Howl = Howl;\n    __webpack_require__.g.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n\n\n/*!\n *  Spatial Plugin - Adds support for stereo and 3D audio where Web Audio is supported.\n *  \n *  howler.js v2.2.1\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  // Setup default properties.\n  HowlerGlobal.prototype._pos = [0, 0, 0];\n  HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0];\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Helper method to update the stereo panning position of all current Howls.\n   * Future Howls will not use this value unless explicitly set.\n   * @param  {Number} pan A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @return {Howler/Number}     Self or current stereo panning value.\n   */\n  HowlerGlobal.prototype.stereo = function(pan) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Loop through all Howls and update their stereo panning.\n    for (var i=self._howls.length-1; i>=0; i--) {\n      self._howls[i].stereo(pan);\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the position of the listener in 3D cartesian space. Sounds using\n   * 3D position will be relative to the listener's position.\n   * @param  {Number} x The x-position of the listener.\n   * @param  {Number} y The y-position of the listener.\n   * @param  {Number} z The z-position of the listener.\n   * @return {Howler/Array}   Self or current listener position.\n   */\n  HowlerGlobal.prototype.pos = function(x, y, z) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._pos[1] : y;\n    z = (typeof z !== 'number') ? self._pos[2] : z;\n\n    if (typeof x === 'number') {\n      self._pos = [x, y, z];\n\n      if (typeof self.ctx.listener.positionX !== 'undefined') {\n        self.ctx.listener.positionX.setTargetAtTime(self._pos[0], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionY.setTargetAtTime(self._pos[1], Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.positionZ.setTargetAtTime(self._pos[2], Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setPosition(self._pos[0], self._pos[1], self._pos[2]);\n      }\n    } else {\n      return self._pos;\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the listener is pointing in the 3D cartesian space.\n   * A front and up vector must be provided. The front is the direction the\n   * face of the listener is pointing, and up is the direction the top of the\n   * listener is pointing. Thus, these values are expected to be at right angles\n   * from each other.\n   * @param  {Number} x   The x-orientation of the listener.\n   * @param  {Number} y   The y-orientation of the listener.\n   * @param  {Number} z   The z-orientation of the listener.\n   * @param  {Number} xUp The x-orientation of the top of the listener.\n   * @param  {Number} yUp The y-orientation of the top of the listener.\n   * @param  {Number} zUp The z-orientation of the top of the listener.\n   * @return {Howler/Array}     Returns self or the current orientation vectors.\n   */\n  HowlerGlobal.prototype.orientation = function(x, y, z, xUp, yUp, zUp) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self.ctx || !self.ctx.listener) {\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    var or = self._orientation;\n    y = (typeof y !== 'number') ? or[1] : y;\n    z = (typeof z !== 'number') ? or[2] : z;\n    xUp = (typeof xUp !== 'number') ? or[3] : xUp;\n    yUp = (typeof yUp !== 'number') ? or[4] : yUp;\n    zUp = (typeof zUp !== 'number') ? or[5] : zUp;\n\n    if (typeof x === 'number') {\n      self._orientation = [x, y, z, xUp, yUp, zUp];\n\n      if (typeof self.ctx.listener.forwardX !== 'undefined') {\n        self.ctx.listener.forwardX.setTargetAtTime(x, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardY.setTargetAtTime(y, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.forwardZ.setTargetAtTime(z, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upX.setTargetAtTime(xUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upY.setTargetAtTime(yUp, Howler.ctx.currentTime, 0.1);\n        self.ctx.listener.upZ.setTargetAtTime(zUp, Howler.ctx.currentTime, 0.1);\n      } else {\n        self.ctx.listener.setOrientation(x, y, z, xUp, yUp, zUp);\n      }\n    } else {\n      return or;\n    }\n\n    return self;\n  };\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core init.\n   * @param  {Function} _super Core init method.\n   * @return {Howl}\n   */\n  Howl.prototype.init = (function(_super) {\n    return function(o) {\n      var self = this;\n\n      // Setup user-defined default properties.\n      self._orientation = o.orientation || [1, 0, 0];\n      self._stereo = o.stereo || null;\n      self._pos = o.pos || null;\n      self._pannerAttr = {\n        coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : 360,\n        coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : 360,\n        coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : 0,\n        distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : 'inverse',\n        maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : 10000,\n        panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : 'HRTF',\n        refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : 1,\n        rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : 1\n      };\n\n      // Setup event listeners.\n      self._onstereo = o.onstereo ? [{fn: o.onstereo}] : [];\n      self._onpos = o.onpos ? [{fn: o.onpos}] : [];\n      self._onorientation = o.onorientation ? [{fn: o.onorientation}] : [];\n\n      // Complete initilization with howler.js core's init function.\n      return _super.call(this, o);\n    };\n  })(Howl.prototype.init);\n\n  /**\n   * Get/set the stereo panning of the audio source for this sound or all in the group.\n   * @param  {Number} pan  A value of -1.0 is all the way left and 1.0 is all the way right.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Number}    Returns self or the current stereo panning value.\n   */\n  Howl.prototype.stereo = function(pan, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change stereo pan when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'stereo',\n        action: function() {\n          self.stereo(pan, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Check for PannerStereoNode support and fallback to PannerNode if it doesn't exist.\n    var pannerType = (typeof Howler.ctx.createStereoPanner === 'undefined') ? 'spatial' : 'stereo';\n\n    // Setup the group's stereo panning if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's stereo panning if no parameters are passed.\n      if (typeof pan === 'number') {\n        self._stereo = pan;\n        self._pos = [pan, 0, 0];\n      } else {\n        return self._stereo;\n      }\n    }\n\n    // Change the streo panning of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof pan === 'number') {\n          sound._stereo = pan;\n          sound._pos = [pan, 0, 0];\n\n          if (sound._node) {\n            // If we are falling back, make sure the panningModel is equalpower.\n            sound._pannerAttr.panningModel = 'equalpower';\n\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || !sound._panner.pan) {\n              setupPanner(sound, pannerType);\n            }\n\n            if (pannerType === 'spatial') {\n              if (typeof sound._panner.positionX !== 'undefined') {\n                sound._panner.positionX.setValueAtTime(pan, Howler.ctx.currentTime);\n                sound._panner.positionY.setValueAtTime(0, Howler.ctx.currentTime);\n                sound._panner.positionZ.setValueAtTime(0, Howler.ctx.currentTime);\n              } else {\n                sound._panner.setPosition(pan, 0, 0);\n              }\n            } else {\n              sound._panner.pan.setValueAtTime(pan, Howler.ctx.currentTime);\n            }\n          }\n\n          self._emit('stereo', sound._id);\n        } else {\n          return sound._stereo;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the 3D spatial position of the audio source for this sound or group relative to the global listener.\n   * @param  {Number} x  The x-position of the audio source.\n   * @param  {Number} y  The y-position of the audio source.\n   * @param  {Number} z  The z-position of the audio source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial position: [x, y, z].\n   */\n  Howl.prototype.pos = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change position when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'pos',\n        action: function() {\n          self.pos(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? 0 : y;\n    z = (typeof z !== 'number') ? -0.5 : z;\n\n    // Setup the group's spatial position if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial position if no parameters are passed.\n      if (typeof x === 'number') {\n        self._pos = [x, y, z];\n      } else {\n        return self._pos;\n      }\n    }\n\n    // Change the spatial position of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._pos = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner || sound._panner.pan) {\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.positionX !== 'undefined') {\n              sound._panner.positionX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.positionY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.positionZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setPosition(x, y, z);\n            }\n          }\n\n          self._emit('pos', sound._id);\n        } else {\n          return sound._pos;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the direction the audio source is pointing in the 3D cartesian coordinate\n   * space. Depending on how direction the sound is, based on the `cone` attributes,\n   * a sound pointing away from the listener can be quiet or silent.\n   * @param  {Number} x  The x-orientation of the source.\n   * @param  {Number} y  The y-orientation of the source.\n   * @param  {Number} z  The z-orientation of the source.\n   * @param  {Number} id (optional) The sound ID. If none is passed, all in group will be updated.\n   * @return {Howl/Array}    Returns self or the current 3D spatial orientation: [x, y, z].\n   */\n  Howl.prototype.orientation = function(x, y, z, id) {\n    var self = this;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // If the sound hasn't loaded, add it to the load queue to change orientation when capable.\n    if (self._state !== 'loaded') {\n      self._queue.push({\n        event: 'orientation',\n        action: function() {\n          self.orientation(x, y, z, id);\n        }\n      });\n\n      return self;\n    }\n\n    // Set the defaults for optional 'y' & 'z'.\n    y = (typeof y !== 'number') ? self._orientation[1] : y;\n    z = (typeof z !== 'number') ? self._orientation[2] : z;\n\n    // Setup the group's spatial orientation if no ID is passed.\n    if (typeof id === 'undefined') {\n      // Return the group's spatial orientation if no parameters are passed.\n      if (typeof x === 'number') {\n        self._orientation = [x, y, z];\n      } else {\n        return self._orientation;\n      }\n    }\n\n    // Change the spatial orientation of one or all sounds in group.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      // Get the sound.\n      var sound = self._soundById(ids[i]);\n\n      if (sound) {\n        if (typeof x === 'number') {\n          sound._orientation = [x, y, z];\n\n          if (sound._node) {\n            // Check if there is a panner setup and create a new one if not.\n            if (!sound._panner) {\n              // Make sure we have a position to setup the node with.\n              if (!sound._pos) {\n                sound._pos = self._pos || [0, 0, -0.5];\n              }\n\n              setupPanner(sound, 'spatial');\n            }\n\n            if (typeof sound._panner.orientationX !== 'undefined') {\n              sound._panner.orientationX.setValueAtTime(x, Howler.ctx.currentTime);\n              sound._panner.orientationY.setValueAtTime(y, Howler.ctx.currentTime);\n              sound._panner.orientationZ.setValueAtTime(z, Howler.ctx.currentTime);\n            } else {\n              sound._panner.setOrientation(x, y, z);\n            }\n          }\n\n          self._emit('orientation', sound._id);\n        } else {\n          return sound._orientation;\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /**\n   * Get/set the panner node's attributes for a sound or group of sounds.\n   * This method can optionall take 0, 1 or 2 arguments.\n   *   pannerAttr() -> Returns the group's values.\n   *   pannerAttr(id) -> Returns the sound id's values.\n   *   pannerAttr(o) -> Set's the values of all sounds in this Howl group.\n   *   pannerAttr(o, id) -> Set's the values of passed sound id.\n   *\n   *   Attributes:\n   *     coneInnerAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      inside of which there will be no volume reduction.\n   *     coneOuterAngle - (360 by default) A parameter for directional audio sources, this is an angle, in degrees,\n   *                      outside of which the volume will be reduced to a constant value of `coneOuterGain`.\n   *     coneOuterGain - (0 by default) A parameter for directional audio sources, this is the gain outside of the\n   *                     `coneOuterAngle`. It is a linear value in the range `[0, 1]`.\n   *     distanceModel - ('inverse' by default) Determines algorithm used to reduce volume as audio moves away from\n   *                     listener. Can be `linear`, `inverse` or `exponential.\n   *     maxDistance - (10000 by default) The maximum distance between source and listener, after which the volume\n   *                   will not be reduced any further.\n   *     refDistance - (1 by default) A reference distance for reducing volume as source moves further from the listener.\n   *                   This is simply a variable of the distance model and has a different effect depending on which model\n   *                   is used and the scale of your coordinates. Generally, volume will be equal to 1 at this distance.\n   *     rolloffFactor - (1 by default) How quickly the volume reduces as source moves from listener. This is simply a\n   *                     variable of the distance model and can be in the range of `[0, 1]` with `linear` and `[0, ∞]`\n   *                     with `inverse` and `exponential`.\n   *     panningModel - ('HRTF' by default) Determines which spatialization algorithm is used to position audio.\n   *                     Can be `HRTF` or `equalpower`.\n   *\n   * @return {Howl/Object} Returns self or current panner attributes.\n   */\n  Howl.prototype.pannerAttr = function() {\n    var self = this;\n    var args = arguments;\n    var o, id, sound;\n\n    // Stop right here if not using Web Audio.\n    if (!self._webAudio) {\n      return self;\n    }\n\n    // Determine the values based on arguments.\n    if (args.length === 0) {\n      // Return the group's panner attribute values.\n      return self._pannerAttr;\n    } else if (args.length === 1) {\n      if (typeof args[0] === 'object') {\n        o = args[0];\n\n        // Set the grou's panner attribute values.\n        if (typeof id === 'undefined') {\n          if (!o.pannerAttr) {\n            o.pannerAttr = {\n              coneInnerAngle: o.coneInnerAngle,\n              coneOuterAngle: o.coneOuterAngle,\n              coneOuterGain: o.coneOuterGain,\n              distanceModel: o.distanceModel,\n              maxDistance: o.maxDistance,\n              refDistance: o.refDistance,\n              rolloffFactor: o.rolloffFactor,\n              panningModel: o.panningModel\n            };\n          }\n\n          self._pannerAttr = {\n            coneInnerAngle: typeof o.pannerAttr.coneInnerAngle !== 'undefined' ? o.pannerAttr.coneInnerAngle : self._coneInnerAngle,\n            coneOuterAngle: typeof o.pannerAttr.coneOuterAngle !== 'undefined' ? o.pannerAttr.coneOuterAngle : self._coneOuterAngle,\n            coneOuterGain: typeof o.pannerAttr.coneOuterGain !== 'undefined' ? o.pannerAttr.coneOuterGain : self._coneOuterGain,\n            distanceModel: typeof o.pannerAttr.distanceModel !== 'undefined' ? o.pannerAttr.distanceModel : self._distanceModel,\n            maxDistance: typeof o.pannerAttr.maxDistance !== 'undefined' ? o.pannerAttr.maxDistance : self._maxDistance,\n            refDistance: typeof o.pannerAttr.refDistance !== 'undefined' ? o.pannerAttr.refDistance : self._refDistance,\n            rolloffFactor: typeof o.pannerAttr.rolloffFactor !== 'undefined' ? o.pannerAttr.rolloffFactor : self._rolloffFactor,\n            panningModel: typeof o.pannerAttr.panningModel !== 'undefined' ? o.pannerAttr.panningModel : self._panningModel\n          };\n        }\n      } else {\n        // Return this sound's panner attribute values.\n        sound = self._soundById(parseInt(args[0], 10));\n        return sound ? sound._pannerAttr : self._pannerAttr;\n      }\n    } else if (args.length === 2) {\n      o = args[0];\n      id = parseInt(args[1], 10);\n    }\n\n    // Update the values of the specified sounds.\n    var ids = self._getSoundIds(id);\n    for (var i=0; i<ids.length; i++) {\n      sound = self._soundById(ids[i]);\n\n      if (sound) {\n        // Merge the new values into the sound.\n        var pa = sound._pannerAttr;\n        pa = {\n          coneInnerAngle: typeof o.coneInnerAngle !== 'undefined' ? o.coneInnerAngle : pa.coneInnerAngle,\n          coneOuterAngle: typeof o.coneOuterAngle !== 'undefined' ? o.coneOuterAngle : pa.coneOuterAngle,\n          coneOuterGain: typeof o.coneOuterGain !== 'undefined' ? o.coneOuterGain : pa.coneOuterGain,\n          distanceModel: typeof o.distanceModel !== 'undefined' ? o.distanceModel : pa.distanceModel,\n          maxDistance: typeof o.maxDistance !== 'undefined' ? o.maxDistance : pa.maxDistance,\n          refDistance: typeof o.refDistance !== 'undefined' ? o.refDistance : pa.refDistance,\n          rolloffFactor: typeof o.rolloffFactor !== 'undefined' ? o.rolloffFactor : pa.rolloffFactor,\n          panningModel: typeof o.panningModel !== 'undefined' ? o.panningModel : pa.panningModel\n        };\n\n        // Update the panner values or create a new panner if none exists.\n        var panner = sound._panner;\n        if (panner) {\n          panner.coneInnerAngle = pa.coneInnerAngle;\n          panner.coneOuterAngle = pa.coneOuterAngle;\n          panner.coneOuterGain = pa.coneOuterGain;\n          panner.distanceModel = pa.distanceModel;\n          panner.maxDistance = pa.maxDistance;\n          panner.refDistance = pa.refDistance;\n          panner.rolloffFactor = pa.rolloffFactor;\n          panner.panningModel = pa.panningModel;\n        } else {\n          // Make sure we have a position to setup the node with.\n          if (!sound._pos) {\n            sound._pos = self._pos || [0, 0, -0.5];\n          }\n\n          // Create a new panner node.\n          setupPanner(sound, 'spatial');\n        }\n      }\n    }\n\n    return self;\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Add new properties to the core Sound init.\n   * @param  {Function} _super Core Sound init method.\n   * @return {Sound}\n   */\n  Sound.prototype.init = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup user-defined default properties.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // Complete initilization with howler.js core Sound's init function.\n      _super.call(this);\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      }\n    };\n  })(Sound.prototype.init);\n\n  /**\n   * Override the Sound.reset method to clean up properties from the spatial plugin.\n   * @param  {Function} _super Sound reset method.\n   * @return {Sound}\n   */\n  Sound.prototype.reset = (function(_super) {\n    return function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all spatial plugin properties on this sound.\n      self._orientation = parent._orientation;\n      self._stereo = parent._stereo;\n      self._pos = parent._pos;\n      self._pannerAttr = parent._pannerAttr;\n\n      // If a stereo or position was specified, set it up.\n      if (self._stereo) {\n        parent.stereo(self._stereo);\n      } else if (self._pos) {\n        parent.pos(self._pos[0], self._pos[1], self._pos[2], self._id);\n      } else if (self._panner) {\n        // Disconnect the panner.\n        self._panner.disconnect(0);\n        self._panner = undefined;\n        parent._refreshBuffer(self);\n      }\n\n      // Complete resetting of the sound.\n      return _super.call(this);\n    };\n  })(Sound.prototype.reset);\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create a new panner node and save it on the sound.\n   * @param  {Sound} sound Specific sound to setup panning on.\n   * @param {String} type Type of panner to create: 'stereo' or 'spatial'.\n   */\n  var setupPanner = function(sound, type) {\n    type = type || 'spatial';\n\n    // Create the new panner node.\n    if (type === 'spatial') {\n      sound._panner = Howler.ctx.createPanner();\n      sound._panner.coneInnerAngle = sound._pannerAttr.coneInnerAngle;\n      sound._panner.coneOuterAngle = sound._pannerAttr.coneOuterAngle;\n      sound._panner.coneOuterGain = sound._pannerAttr.coneOuterGain;\n      sound._panner.distanceModel = sound._pannerAttr.distanceModel;\n      sound._panner.maxDistance = sound._pannerAttr.maxDistance;\n      sound._panner.refDistance = sound._pannerAttr.refDistance;\n      sound._panner.rolloffFactor = sound._pannerAttr.rolloffFactor;\n      sound._panner.panningModel = sound._pannerAttr.panningModel;\n\n      if (typeof sound._panner.positionX !== 'undefined') {\n        sound._panner.positionX.setValueAtTime(sound._pos[0], Howler.ctx.currentTime);\n        sound._panner.positionY.setValueAtTime(sound._pos[1], Howler.ctx.currentTime);\n        sound._panner.positionZ.setValueAtTime(sound._pos[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setPosition(sound._pos[0], sound._pos[1], sound._pos[2]);\n      }\n\n      if (typeof sound._panner.orientationX !== 'undefined') {\n        sound._panner.orientationX.setValueAtTime(sound._orientation[0], Howler.ctx.currentTime);\n        sound._panner.orientationY.setValueAtTime(sound._orientation[1], Howler.ctx.currentTime);\n        sound._panner.orientationZ.setValueAtTime(sound._orientation[2], Howler.ctx.currentTime);\n      } else {\n        sound._panner.setOrientation(sound._orientation[0], sound._orientation[1], sound._orientation[2]);\n      }\n    } else {\n      sound._panner = Howler.ctx.createStereoPanner();\n      sound._panner.pan.setValueAtTime(sound._stereo, Howler.ctx.currentTime);\n    }\n\n    sound._panner.connect(sound._node);\n\n    // Update the connections.\n    if (!sound._paused) {\n      sound._parent.pause(sound._id, true).play(sound._id, true);\n    }\n  };\n})();\n\n\n//# sourceURL=webpack://specters.io/./node_modules/howler/dist/howler.js?")}},__webpack_module_cache__={};function __webpack_require__(e){if(__webpack_module_cache__[e])return __webpack_module_cache__[e].exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{eval("var Game = __webpack_require__(/*! ./game */ \"./client/game.js\");\n\nvar _require = __webpack_require__(/*! ./util/validations */ \"./client/util/validations.js\"),\n    validateName = _require.validateName;\n\nwindow.onload = function () {\n  var game = new Game();\n  var playForm = document.getElementById('play-form');\n  var body = document.getElementsByTagName('body')[0];\n  var name = document.getElementById('name-play');\n  var gameName = document.getElementsByClassName('game-name')[0];\n  name.focus();\n  playForm.addEventListener('submit', function (e) {\n    e.preventDefault();\n    playForm.style.display = 'none';\n    gameName.style.display = 'none';\n    body.style.background = '#000';\n    body.style.cursor = 'crosshair';\n    game.start(validateName(name.value));\n  });\n};\n\n//# sourceURL=webpack://specters.io/./client/index.js?")})()})();